# *********** AT THE MONEY FORWARD IMPLIED VOLATILITY EMMULATION  ************ #
# **************************************************************************** # 
# *********** GOAL: EMMULATE THE VIX FOR DIFFERENT SECURITIES **************** #
# **************************************************************************** # 
# **************************** MOTIVATION ************************************ # 
# ******** FOR ESTIMATION OF IMPLIED VOLATILITY SUMMARY STATISTICS *********** #
################################################################################
# LOAD THE PACKAGES ******************************************************** ####
start.time = Sys.time()
# PACKAGE LOADS ************************************************************ ####
suppressMessages(pacman::p_load("PerformanceAnalytics","quantmod",
                                "LSMRealOptions","RQuantLib","fOptions",
                                "PortfolioAnalytics","reticulate","LSMonteCarlo",
                                "anytime","pbapply","lubridate",
                                "TTR","dplyr","IBrokers","alphavantager",          
                                "tidyquant","httr","purrr","rvest",
                                "devtools","urca","derivmkts","tidyr",
                                "data.table","jsonlite","stringr","xml2","tibble"))
# DATE AND TIME FORMATTING ************************************************* ####
start_time <- Sys.time()
first.date <- Sys.Date()-(365*1)
last.date <- Sys.Date()
# FUNCTIONS TO PULL OPTIONS ************************************************ ####
# * Citation: https://github.com/jgQuantScripts/CBOE_OPTIONS * #
# function to extract Expirations, Flag, and Strike from Option Name
getEFS = function(x){
  expiry = str_sub(x, -15,-10)
  expiry = as.character(as.Date(expiry,format="%y%m%d"))
  flag   = str_sub(x,-9,-9)
  strike = str_sub(x,-8,-1)
  left   = str_sub(strike,-8,-4)
  right  = str_sub(strike,-3,-1)  
  strike = paste0(left,".",right)
  strike = as.numeric(strike)
  as.data.frame(cbind(expiry,flag,strike))
}
# get Options + Calculate IV & Greeks
Pull.Options = function(symbol,EXERCISE){
  # url to get options - will read in all using json
  #url = "https://cdn.cboe.com/api/global/delayed_quotes/options/_SPX.json"
  url = paste0("https://cdn.cboe.com/api/global/delayed_quotes/options/",symbol,".json")
  # read in data from page
  df = read_json(url,simplifyVector = TRUE)
  # convert as data frame
  opts = as.data.frame(df$data$options)
  # get Expiration, Flag, & Strike
  efs <- getEFS(opts$option)
  # combine with options data
  opts <- cbind(opts,efs)
  # fix last_trade_time
  opts$last_trade_time <- as.character(as.POSIXct(opts$last_trade_time,
                                                  format="%Y-%m-%dT%H:%M:%S"))
  opts$stkClose <- df$data$close
  # add date pulled
  opts$Date = as.character(Sys.Date())
  # add Days to Expiration
  opts$days2Exp = as.Date(opts$expiry) - as.Date(opts$Date) 
  # Option Mid Price  
  opts$Mid = round((opts$bid + opts$ask)/2,2)
  
  # calculate IV
  if(EXERCISE == "european")
  {
    ivs = pblapply(as.list(1:nrow(opts)),function(ii){
      tmp = try(EuropeanOptionImpliedVolatility(
        type = ifelse(opts$flag[ii] == "C","call","put"), 
        value=as.numeric(opts$Mid)[ii],
        underlying=as.numeric(df$data$close), 
        strike=as.numeric(opts$strike)[ii], 
        dividendYield=0,
        # ifelse(class(suppressWarnings(tryCatch(mean(as.numeric(tail(getDividends(symbol))[-1][-1]))/getQuote(symbol)[,2])))==numeric(),suppressWarnings(tryCatch(mean(as.numeric(tail(getDividends(symbol))[-1][-1]))/getQuote(symbol)[,2])),0), 
        riskFreeRate=0,
        # (as.numeric(last(suppressWarnings(tryCatch(getSymbols.FRED("DGS10", auto.assign = FALSE,env = .GlobalEnv)))/100)))/252,
        maturity=as.numeric(yearFraction(as.Date(opts$Date[ii]),
                                         as.Date(opts$expiry[ii]),
                                         1)), 
        volatility=as.numeric(df$data$iv30/100)),
        silent=TRUE)
      if(inherits(tmp,'try-error')){
        iv = round(as.numeric(df$data$iv30/100),4)
      }else{
        iv = round(tmp[[1]],4)
      }
      iv
    })
    
  }else{
    ivs = pblapply(as.list(1:nrow(opts)),function(ii){
      tmp = try(AmericanOptionImpliedVolatility(
        type = ifelse(opts$flag[ii] == "C","call","put"), 
        value=as.numeric(opts$Mid)[ii],
        underlying=as.numeric(df$data$close), 
        strike=as.numeric(opts$strike)[ii], 
        dividendYield=0,
        # ifelse(class(suppressWarnings(tryCatch(mean(as.numeric(tail(getDividends(symbol))[-1][-1]))/getQuote(symbol)[,2])))==numeric(),suppressWarnings(tryCatch(mean(as.numeric(tail(getDividends(symbol))[-1][-1]))/getQuote(symbol)[,2])),0), 
        riskFreeRate=0,
        # (as.numeric(last(suppressWarnings(tryCatch(getSymbols.FRED("DGS10", auto.assign = FALSE,env = .GlobalEnv)))/100)))/252,
        maturity=as.numeric(yearFraction(as.Date(opts$Date[ii]),
                                         as.Date(opts$expiry[ii]),
                                         1)), 
        volatility=as.numeric(df$data$iv30/100)),
        silent=TRUE)
      if(inherits(tmp,'try-error')){
        iv = round(as.numeric(df$data$iv30/100),4)
      }else{
        iv = round(tmp[[1]],4)
      }
      iv
    })
  }
  
  # add Caluclated IVs to Options Date
  opts$calc_IV = do.call(rbind,ivs)  
  
  # calculate greeks
  CALLS = subset(opts, opts$flag == "C")
  PUTS = subset(opts, opts$flag == "P")
  
  # greeks for calls
  cGREEKS = greeks2(bscall,list(s=as.numeric(CALLS$stkClose),
                                k=as.numeric(CALLS$strike),
                                v=as.numeric(CALLS$calc_IV),
                                r=rep(0,nrow(CALLS)),
                                tt=as.numeric(CALLS$days2Exp)/252,
                                d=rep(0,nrow(CALLS))))  
  # transpose greeks
  cGREEKS = t(cGREEKS)
  # combine with call options
  CALLS = cbind(CALLS,cGREEKS)
  
  # greeks for calls
  pGREEKS = greeks2(bsput,list(s=as.numeric(PUTS$stkClose),
                               k=as.numeric(PUTS$strike),
                               v=as.numeric(PUTS$calc_IV),
                               r=rep(0,nrow(PUTS)),
                               tt=as.numeric(PUTS$days2Exp)/252,
                               d=rep(0,nrow(PUTS))))  
  # transpose greeks
  pGREEKS = t(pGREEKS)
  # combine with call options
  PUTS = cbind(PUTS,pGREEKS)
  # combine calls/puts
  opts = rbind(CALLS,PUTS)
  # add ticker column
  opts$Symbol = symbol
  opts
}
# PULL THE INDEX/ASSETS' OPTIONS ******************************************* ####
SYMBOL = "_SPX" #"_SPX", "SPY", "TSLA"
ASSIGNMENT = "european" # "european" or "american"
INDEX_OPTS <- suppressWarnings(Pull.Options(SYMBOL,ASSIGNMENT))
# START THE FILTRATION SYSTEM ********************************************** ####
INDEX_OPTS <- na.omit(INDEX_OPTS)
# Get a Current Spot Price
SYMBOL = if (SYMBOL ==  "_SPX"){"^GSPC"}else{SYMBOL}
UND_SPOT            <- getQuote(SYMBOL)[2] %>% as.numeric(); UND_SPOT
INDEX_OPTS$UND_SPOT <- replicate(nrow(INDEX_OPTS),UND_SPOT)
# Keep all Options where Days to Expiration 22<=T<=38
INDEX_OPTS_NEAR_TERM <- INDEX_OPTS[INDEX_OPTS$days2Exp>=23 & INDEX_OPTS$days2Exp<30
                                   & weekdays(today()+as.numeric(INDEX_OPTS$days2Exp))=="Friday",]
INDEX_OPTS_NEXT_TERM <- INDEX_OPTS[INDEX_OPTS$days2Exp>30 & INDEX_OPTS$days2Exp<=37
                                   & weekdays(today()+as.numeric(INDEX_OPTS$days2Exp))=="Friday",]
# Near Term Options - Label as ITM or OTM
INDEX_OPTS_NEAR_TERM_CALLS_ITM   <- INDEX_OPTS_NEAR_TERM[as.numeric(INDEX_OPTS_NEAR_TERM$strike) < INDEX_OPTS_NEAR_TERM$UND_SPOT 
                                                         & INDEX_OPTS_NEAR_TERM$flag == "C",]
INDEX_OPTS_NEAR_TERM_CALLS_OTM   <- INDEX_OPTS_NEAR_TERM[as.numeric(INDEX_OPTS_NEAR_TERM$strike) > INDEX_OPTS_NEAR_TERM$UND_SPOT 
                                                         & INDEX_OPTS_NEAR_TERM$flag == "C",]
INDEX_OPTS_NEAR_TERM_PUTS_ITM    <- INDEX_OPTS_NEAR_TERM[as.numeric(INDEX_OPTS_NEAR_TERM$strike) > INDEX_OPTS_NEAR_TERM$UND_SPOT 
                                                         & INDEX_OPTS_NEAR_TERM$flag == "P",]
INDEX_OPTS_NEAR_TERM_PUTS_OTM    <- INDEX_OPTS_NEAR_TERM[as.numeric(INDEX_OPTS_NEAR_TERM$strike) < INDEX_OPTS_NEAR_TERM$UND_SPOT 
                                                         & INDEX_OPTS_NEAR_TERM$flag == "P",]
INDEX_OPTS_NEAR_TERM_CALLS_ITM$Moneyness <- "ITM"
INDEX_OPTS_NEAR_TERM_CALLS_OTM$Moneyness <- "OTM"
INDEX_OPTS_NEAR_TERM_PUTS_ITM$Moneyness  <- "ITM"
INDEX_OPTS_NEAR_TERM_PUTS_OTM$Moneyness  <- "OTM"
# Next Term Options - Label as ITM or OTM
INDEX_OPTS_NEXT_TERM_CALLS_ITM   <- INDEX_OPTS_NEXT_TERM[as.numeric(INDEX_OPTS_NEXT_TERM$strike) < INDEX_OPTS_NEXT_TERM$UND_SPOT 
                                                         & INDEX_OPTS_NEXT_TERM$flag == "C",]
INDEX_OPTS_NEXT_TERM_CALLS_OTM   <- INDEX_OPTS_NEXT_TERM[as.numeric(INDEX_OPTS_NEXT_TERM$strike) > INDEX_OPTS_NEXT_TERM$UND_SPOT 
                                                         & INDEX_OPTS_NEXT_TERM$flag == "C",]
INDEX_OPTS_NEXT_TERM_PUTS_ITM    <- INDEX_OPTS_NEXT_TERM[as.numeric(INDEX_OPTS_NEXT_TERM$strike) > INDEX_OPTS_NEXT_TERM$UND_SPOT 
                                                         & INDEX_OPTS_NEXT_TERM$flag == "P",]
INDEX_OPTS_NEXT_TERM_PUTS_OTM    <- INDEX_OPTS_NEXT_TERM[as.numeric(INDEX_OPTS_NEXT_TERM$strike) < INDEX_OPTS_NEXT_TERM$UND_SPOT 
                                                         & INDEX_OPTS_NEXT_TERM$flag == "P",]
INDEX_OPTS_NEXT_TERM_CALLS_ITM$Moneyness <- "ITM"
INDEX_OPTS_NEXT_TERM_CALLS_OTM$Moneyness <- "OTM"
INDEX_OPTS_NEXT_TERM_PUTS_ITM$Moneyness  <- "ITM"
INDEX_OPTS_NEXT_TERM_PUTS_OTM$Moneyness  <- "OTM"
# Rebind the Results
INDEX_OPTS_NEAR_TERM_CALLS <- rbind(INDEX_OPTS_NEAR_TERM_CALLS_ITM,INDEX_OPTS_NEAR_TERM_CALLS_OTM)
INDEX_OPTS_NEAR_TERM_PUTS  <- rbind(INDEX_OPTS_NEAR_TERM_PUTS_ITM,INDEX_OPTS_NEAR_TERM_PUTS_OTM)
INDEX_OPTS_NEXT_TERM_CALLS <- rbind(INDEX_OPTS_NEXT_TERM_CALLS_ITM,INDEX_OPTS_NEXT_TERM_CALLS_OTM)
INDEX_OPTS_NEXT_TERM_PUTS  <- rbind(INDEX_OPTS_NEXT_TERM_PUTS_ITM,INDEX_OPTS_NEXT_TERM_PUTS_OTM)
# Clean Up
rm(INDEX_OPTS_NEAR_TERM_CALLS_ITM,INDEX_OPTS_NEAR_TERM_CALLS_OTM,INDEX_OPTS_NEAR_TERM_PUTS_ITM,INDEX_OPTS_NEAR_TERM_PUTS_OTM)
rm(INDEX_OPTS_NEXT_TERM_CALLS_ITM,INDEX_OPTS_NEXT_TERM_CALLS_OTM,INDEX_OPTS_NEXT_TERM_PUTS_ITM,INDEX_OPTS_NEXT_TERM_PUTS_OTM)
# Match the Strikes in the data frames
INDEX_OPTS_NEAR_TERM_CALLS <- suppressWarnings(INDEX_OPTS_NEAR_TERM_CALLS[INDEX_OPTS_NEAR_TERM_CALLS$strike %in%  INDEX_OPTS_NEAR_TERM_PUTS$strike,])
INDEX_OPTS_NEAR_TERM_PUTS  <- suppressWarnings(INDEX_OPTS_NEAR_TERM_PUTS[INDEX_OPTS_NEAR_TERM_PUTS$strike   %in%  INDEX_OPTS_NEAR_TERM_CALLS$strike,])
INDEX_OPTS_NEXT_TERM_CALLS <- suppressWarnings(INDEX_OPTS_NEXT_TERM_CALLS[INDEX_OPTS_NEXT_TERM_CALLS$strike %in%  INDEX_OPTS_NEXT_TERM_PUTS$strike,])
INDEX_OPTS_NEXT_TERM_PUTS  <- suppressWarnings(INDEX_OPTS_NEXT_TERM_PUTS[INDEX_OPTS_NEXT_TERM_PUTS$strike   %in%  INDEX_OPTS_NEXT_TERM_CALLS$strike,])
# Order By Strike
INDEX_OPTS_NEAR_TERM_CALLS <- INDEX_OPTS_NEAR_TERM_CALLS[order(INDEX_OPTS_NEAR_TERM_CALLS$strike),]
INDEX_OPTS_NEAR_TERM_PUTS  <- INDEX_OPTS_NEAR_TERM_PUTS[order(INDEX_OPTS_NEAR_TERM_PUTS$strike),]
INDEX_OPTS_NEXT_TERM_CALLS <- INDEX_OPTS_NEXT_TERM_CALLS[order(INDEX_OPTS_NEXT_TERM_CALLS$strike),]
INDEX_OPTS_NEXT_TERM_PUTS  <- INDEX_OPTS_NEXT_TERM_PUTS[order(INDEX_OPTS_NEXT_TERM_PUTS$strike),]
# Bind up Specific Columns
INDEX_OPTS_NEAR_TERM <- 
  cbind(INDEX_OPTS_NEAR_TERM_CALLS$Moneyness,
        INDEX_OPTS_NEAR_TERM_PUTS$Moneyness,
        INDEX_OPTS_NEAR_TERM_CALLS$strike,
        INDEX_OPTS_NEAR_TERM_CALLS$UND_SPOT,
        INDEX_OPTS_NEAR_TERM_CALLS$days2Exp,
        INDEX_OPTS_NEAR_TERM_CALLS$Mid,
        INDEX_OPTS_NEAR_TERM_PUTS$Mid) %>% data.frame()
colnames(INDEX_OPTS_NEAR_TERM) <- c("Call_Moneyness","Put_Moneyness","strike","UND_SPOT","days2Exp","Call_Mid","Put_Mid")
INDEX_OPTS_NEXT_TERM <- 
  cbind(INDEX_OPTS_NEXT_TERM_CALLS$Moneyness,
        INDEX_OPTS_NEXT_TERM_PUTS$Moneyness,
        INDEX_OPTS_NEXT_TERM_CALLS$strike,
        INDEX_OPTS_NEXT_TERM_CALLS$UND_SPOT,
        INDEX_OPTS_NEXT_TERM_CALLS$days2Exp,
        INDEX_OPTS_NEXT_TERM_CALLS$Mid,
        INDEX_OPTS_NEXT_TERM_PUTS$Mid) %>% data.frame()
colnames(INDEX_OPTS_NEXT_TERM) <- c("Call_Moneyness","Put_Moneyness","strike","UND_SPOT","days2Exp","Call_Mid","Put_Mid")
# Clean Up
rm(INDEX_OPTS_NEAR_TERM_CALLS,INDEX_OPTS_NEAR_TERM_PUTS,INDEX_OPTS_NEXT_TERM_CALLS,INDEX_OPTS_NEXT_TERM_PUTS)
# Calculate the Differences
INDEX_OPTS_NEAR_TERM$Difff <- abs(as.numeric(INDEX_OPTS_NEAR_TERM$Call_Mid) - as.numeric(INDEX_OPTS_NEAR_TERM$Put_Mid)) 
INDEX_OPTS_NEXT_TERM$Difff <- abs(as.numeric(INDEX_OPTS_NEXT_TERM$Call_Mid) - as.numeric(INDEX_OPTS_NEXT_TERM$Put_Mid)) 
# Get Rid of the Doubled Up OTM and ITM 
# Get the Rows with the Minimum Differences
FW_NEAR_OPT <- INDEX_OPTS_NEAR_TERM[INDEX_OPTS_NEAR_TERM$Difff == min(INDEX_OPTS_NEAR_TERM$Difff),]
FW_NEXT_OPT <- INDEX_OPTS_NEXT_TERM[INDEX_OPTS_NEXT_TERM$Difff == min(INDEX_OPTS_NEXT_TERM$Difff),]
# Filter Out for Very Specific Options in the near
INDEX_OPTS_NEAR_TERM_UP    <- INDEX_OPTS_NEAR_TERM[-(nrow(INDEX_OPTS_NEAR_TERM) - as.numeric(table(INDEX_OPTS_NEAR_TERM$Call_Moneyness)[[2]]):nrow(INDEX_OPTS_NEAR_TERM)),] 
INDEX_OPTS_NEAR_TERM_DOWN  <- INDEX_OPTS_NEAR_TERM[(nrow(INDEX_OPTS_NEAR_TERM) - as.numeric(table(INDEX_OPTS_NEAR_TERM$Call_Moneyness)[[2]]):nrow(INDEX_OPTS_NEAR_TERM)),] 
INDEX_OPTS_NEAR_TERM_DOWN  <- INDEX_OPTS_NEAR_TERM_DOWN[order(INDEX_OPTS_NEAR_TERM_DOWN$strike),]
INDEX_OPTS_NEAR_TERM_DOWN  <- INDEX_OPTS_NEAR_TERM_DOWN[((nrow(INDEX_OPTS_NEAR_TERM_DOWN) - nrow(INDEX_OPTS_NEAR_TERM_UP) + 1):nrow(INDEX_OPTS_NEAR_TERM_DOWN)),]
INDEX_OPTS_NEAR_TERM       <- rbind(INDEX_OPTS_NEAR_TERM_UP,INDEX_OPTS_NEAR_TERM_DOWN) %>% data.frame()
rm(INDEX_OPTS_NEAR_TERM_DOWN,INDEX_OPTS_NEAR_TERM_UP)
INDEX_OPTS_NEAR_TERM       <- INDEX_OPTS_NEAR_TERM[order(INDEX_OPTS_NEAR_TERM$strike),]
# Filter Out for Very Specific Options in the next
INDEX_OPTS_NEXT_TERM_UP    <- INDEX_OPTS_NEXT_TERM[-(nrow(INDEX_OPTS_NEXT_TERM) - as.numeric(table(INDEX_OPTS_NEXT_TERM$Call_Moneyness)[[2]]):nrow(INDEX_OPTS_NEXT_TERM)),] 
INDEX_OPTS_NEXT_TERM_DOWN  <- INDEX_OPTS_NEXT_TERM[(nrow(INDEX_OPTS_NEXT_TERM) - as.numeric(table(INDEX_OPTS_NEXT_TERM$Call_Moneyness)[[2]]):nrow(INDEX_OPTS_NEXT_TERM)),] 
INDEX_OPTS_NEXT_TERM_DOWN  <- INDEX_OPTS_NEXT_TERM_DOWN[order(INDEX_OPTS_NEXT_TERM_DOWN$strike),]
INDEX_OPTS_NEXT_TERM_DOWN  <- INDEX_OPTS_NEXT_TERM_DOWN[((nrow(INDEX_OPTS_NEXT_TERM_DOWN) - nrow(INDEX_OPTS_NEXT_TERM_UP) + 1):nrow(INDEX_OPTS_NEXT_TERM_DOWN)),]
INDEX_OPTS_NEXT_TERM       <- rbind(INDEX_OPTS_NEXT_TERM_UP,INDEX_OPTS_NEXT_TERM_DOWN) %>% data.frame()
rm(INDEX_OPTS_NEXT_TERM_DOWN,INDEX_OPTS_NEXT_TERM_UP)
INDEX_OPTS_NEXT_TERM       <- INDEX_OPTS_NEXT_TERM[order(INDEX_OPTS_NEXT_TERM$strike),]
# CALCULATE THE FORWARD PRICES FOR NEAR AND NEXT TERM OPTIONS ************** ####
# require("xml2");require("dplyr");require("pbapply");require("quantmod")
start.start = Sys.time()
# https://www.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yield
# READ DAILY RATES
YEAR <- 2021
tmp <- xml2::read_xml(x = paste0("https://data.treasury.gov/feed.svc/",
                                 "DailyTreasuryYieldCurveRateData?",
                                 "$filter=year(NEW_DATE)%20eq%20",YEAR))
# EXTRACT RATES
tmp <- pblapply(as.list(1:length(xml_children(tmp))), function(ii){
  # extract data
  dat <- xml2::as_list(x=xml_child(tmp, ii))$content$properties
  # format date
  DATE <- as.Date(dat$NEW_DATE[[1]],format="%Y-%m-%dT%H:%M:%S")
  # convert to numeric
  ONE_MO <- as.numeric(dat$BC_1MONTH[[1]])
  TWO_MO <- as.numeric(dat$BC_2MONTH[[1]])
  THREE_MO<-as.numeric(dat$BC_3MONTH[[1]])
  SIX_MO <- as.numeric(dat$BC_6MONTH[[1]])
  ONE_YR <- as.numeric(dat$BC_1YEAR[[1]])
  TWO_YR <- as.numeric(dat$BC_2YEAR[[1]])
  THREE_YR<-as.numeric(dat$BC_3YEAR[[1]])
  FVE_YR <- as.numeric(dat$BC_5YEAR[[1]])
  SVN_YR <- as.numeric(dat$BC_7YEAR[[1]])
  TEN_YR <- as.numeric(dat$BC_10YEAR[[1]])
  TWTY_YR<- as.numeric(dat$BC_20YEAR[[1]])
  THRTY_YR<-as.numeric(dat$BC_30YEAR[[1]])
  # column bind rates
  dta <- cbind(ONE_MO,TWO_MO,THREE_MO,SIX_MO,ONE_YR,
               TWO_YR,THREE_YR,FVE_YR,SVN_YR,TEN_YR,
               TWTY_YR,THRTY_YR) %>% as.data.frame
  # convert to xts object
  dta <- as.xts(dta,order.by = DATE)
  # format column names
  colnames(dta) <- c("one.mo","two.mo","three.mo","six.mo","one.yr",
                     "two.yr","three.yr","five.yr","seven.yr","ten.yr",
                     "twenty.yr","thirty.yr")
  # return data (rates)
  dta
})
# ROW BIND 
RATES <- do.call(rbind,tmp) %>% suppressWarnings
t <- c(1/12, 1/6, 0.25, 0.5, 1, 2, 3, 5, 7, 10, 20, 30)
y <- RATES[nrow(RATES),] %>% as.vector()
spl <- smooth.spline(y ~ t)
predict(spl, t)
t.near <- as.numeric(FW_NEAR_OPT$days2Exp)
t.near <- seq(from = (t.near/365)*.5, to = 30, by = (t.near/365)*.5)
t.next <- as.numeric(FW_NEXT_OPT$days2Exp)
t.next <- seq(from = (t.next/365)*.5, to = 30, by = (t.next/365)*.5)
# Combine Predicitions into DF
SPLINE.NEAR <- predict(spl, t.near) %>% data.frame
SPLINE.NEXT <- predict(spl, t.next) %>% data.frame
# Get Interpolated Treasuries
t.near <- as.numeric(FW_NEAR_OPT$days2Exp)
t.next <- as.numeric(FW_NEXT_OPT$days2Exp)
TREAS_NEAR <- (SPLINE.NEAR[which.min(abs(SPLINE.NEAR$x - t.near/365)),]$y %>% as.numeric())/100
TREAS_NEXT <- (SPLINE.NEXT[which.min(abs(SPLINE.NEXT$x - t.next/365)),]$y %>% as.numeric())/100
# Convert Days to Expiration to minutes
TT_NEAR        = as.numeric(FW_NEAR_OPT$days2Exp)/365
M_CR_DAY       = as.numeric((-1)*difftime(strptime(strftime(Sys.time(), format="%H:%M:%S"), format = "%H:%M"), strptime("21:00", format = "%H:%M"), units = "mins"))
M_ST_DAY_NEAR  = 510
TT_NEAR        = ((24*60*as.numeric(FW_NEAR_OPT$days2Exp))+M_ST_DAY_NEAR+M_CR_DAY)/525600
TT_NEXT        = as.numeric(FW_NEXT_OPT$days2Exp)/365
M_ST_DAY_NEXT  = 900
TT_NEXT        = ((24*60*as.numeric(FW_NEXT_OPT$days2Exp))+M_ST_DAY_NEXT+M_CR_DAY)/525600
# Get the Strikes for the Near and Next Term Options
K_NEAR     = as.numeric(FW_NEAR_OPT$strike)
K_NEXT     = as.numeric(FW_NEXT_OPT$strike)
# Calculate the Forward Prices for the Near and Next Term Options
FW_PRICE_NEAR = K_NEAR + FW_NEAR_OPT$Difff*exp(TREAS_NEAR*TT_NEAR)
FW_PRICE_NEXT = K_NEXT + FW_NEXT_OPT$Difff*exp(TREAS_NEXT*TT_NEXT)
# Get the K_0 foor the near and next forward strikes
FW_NEAR_OPT$K_0 <- round(floor(FW_PRICE_NEAR),digits = -1); FW_NEAR_OPT$K_0
FW_NEXT_OPT$K_0 <- round(floor(FW_PRICE_NEXT),digits = -1); FW_NEXT_OPT$K_0
# Subset the OG DF 
OPTS_NEAR_TERM_CALLS  <- INDEX_OPTS[as.numeric(INDEX_OPTS$days2Exp) %in% FW_NEAR_OPT$days2Exp
                                    & as.numeric(INDEX_OPTS$strike) > K_NEAR
                                    & INDEX_OPTS$flag == "C"
                                    & order(INDEX_OPTS$strike),]
OPTS_NEAR_TERM_PUTS   <- INDEX_OPTS[as.numeric(INDEX_OPTS$days2Exp) %in% FW_NEAR_OPT$days2Exp
                                    & as.numeric(INDEX_OPTS$strike) < K_NEAR
                                    & INDEX_OPTS$flag == "P"
                                    & order(INDEX_OPTS$strike),]
OPTS_NEXT_TERM_CALLS  <- INDEX_OPTS[as.numeric(INDEX_OPTS$days2Exp) %in% FW_NEAR_OPT$days2Exp
                                    & as.numeric(INDEX_OPTS$strike) > K_NEXT
                                    & INDEX_OPTS$flag == "C"
                                    & order(INDEX_OPTS$strike),]
OPTS_NEXT_TERM_PUTS   <- INDEX_OPTS[as.numeric(INDEX_OPTS$days2Exp) %in% FW_NEAR_OPT$days2Exp
                                    & as.numeric(INDEX_OPTS$strike) < K_NEXT
                                    & INDEX_OPTS$flag == "P"
                                    & order(INDEX_OPTS$strike),]
# Bind up the Nears and the Nexts
OPTS_NEAR_TERM <- rbind(OPTS_NEAR_TERM_CALLS,OPTS_NEAR_TERM_PUTS) %>% data.frame()
OPTS_NEXT_TERM <- rbind(OPTS_NEXT_TERM_CALLS,OPTS_NEXT_TERM_PUTS) %>% data.frame()
# Clean Up
rm(OPTS_NEAR_TERM_CALLS,
   OPTS_NEAR_TERM_PUTS,
   OPTS_NEXT_TERM_CALLS,
   OPTS_NEXT_TERM_PUTS,
   SPLINE.NEAR,
   SPLINE.NEXT,
   spl,
   RATES)
# Calculate the Put and Call Mid Price Average
K_NEAR_OPT     <- INDEX_OPTS[INDEX_OPTS$strike == K_NEAR
                             & as.numeric(INDEX_OPTS$days2Exp) == as.numeric(FW_NEAR_OPT$days2Exp),]
K_NEAR_OPT_AVE <- mean(K_NEAR_OPT$Mid)
K_NEAR_OPT_BID     <- mean(as.numeric(K_NEAR_OPT[,c("strike","flag","bid")]$bid))
K_NEXT_OPT     <- INDEX_OPTS[INDEX_OPTS$strike == K_NEXT
                             & as.numeric(INDEX_OPTS$days2Exp) == as.numeric(FW_NEXT_OPT$days2Exp),]
K_NEXT_OPT_AVE <- mean(K_NEXT_OPT$Mid)
K_NEXT_OPT_BID     <- mean(as.numeric(K_NEXT_OPT[,c("strike","flag","bid")]$bid))
# Subset the Options DF for specific rows for next calculation
OPTS_NEAR_TERM <-  OPTS_NEAR_TERM %>% select(strike,flag,Mid,bid)
OPTS_NEXT_TERM <-  OPTS_NEXT_TERM %>% select(strike,flag,Mid,bid)
# Add in the Call/Put Mid Average row
# Near
tmp_row        <- data.frame(as.numeric(K_NEAR_OPT$strike[1]),"Put/Call_Average",K_NEAR_OPT_AVE,K_NEAR_OPT_BID)
colnames(tmp_row) <- colnames(OPTS_NEAR_TERM)
OPTS_NEAR_TERM <- rbind(tmp_row,OPTS_NEAR_TERM)
OPTS_NEAR_TERM <- OPTS_NEAR_TERM[order(OPTS_NEAR_TERM$strike),]
# Next
tmp_row        <- data.frame(as.numeric(K_NEXT_OPT$strike[1]),"Put/Call_Average",K_NEXT_OPT_AVE,K_NEXT_OPT_BID)
colnames(tmp_row) <- colnames(OPTS_NEXT_TERM)
OPTS_NEXT_TERM <- rbind(tmp_row,OPTS_NEXT_TERM)
OPTS_NEXT_TERM <- OPTS_NEXT_TERM[order(OPTS_NEXT_TERM$strike),]
# Quick Refresh of the Work-space if needed
rm(tmp_row,K_NEAR_OPT,K_NEAR_OPT_AVE,K_NEXT_OPT,K_NEXT_OPT_AVE)
# rm(list=setdiff(ls(), "INDEX_OPTS"))
# SUBSET FOR BID PRICES GREATER THAN ZERO AND PREP FOR 3RD STEP ************ ####
OPTS_NEAR_TERM <- OPTS_NEAR_TERM[as.numeric(OPTS_NEXT_TERM$bid) > 0,]
OPTS_NEXT_TERM <- OPTS_NEXT_TERM[as.numeric(OPTS_NEXT_TERM$bid) > 0,]
# Run 2 for loops to calculate the contribution by strike and bind to the dfs
NEAR_CONTRIB_LIST <- list()
for (i in 1:nrow(OPTS_NEAR_TERM)){
  # Define K_i+1
  K_ii    = as.numeric(OPTS_NEAR_TERM$strike[i+1])
  # Define K_i-1 == K_i
  K_i     = as.numeric(OPTS_NEAR_TERM$strike[i])
  # Calculate Delta_K
  Delta_K = (K_ii - K_i)/2
  # Calculate (K_i)^2 == K_2i
  K_2i    = (K_i)^2
  # Calculate Exponent Function of exp(R*T)
  Ex.pon  = exp(TREAS_NEAR*TT_NEAR)
  # Get the Midpoint of K_i
  Mid_K_i = as.numeric(OPTS_NEAR_TERM$Mid[i])
  # Calculate the Equation and Place it into the List
  NEAR_CONTRIB_LIST[[i]] = (Delta_K/K_2i)*Ex.pon*Mid_K_i
}
NEAR_CONTRIB_LIST          <- data.frame(do.call(rbind,NEAR_CONTRIB_LIST)); colnames(NEAR_CONTRIB_LIST) <-"Contrib_by_Strike"
OPTS_NEAR_TERM             <- cbind(OPTS_NEAR_TERM,NEAR_CONTRIB_LIST)
OPTS_NEAR_TERM             <- na.omit(OPTS_NEAR_TERM)
NEXT_CONTRIB_LIST <- list()
for (i in 1:nrow(OPTS_NEXT_TERM)){
  # Define K_i+1
  K_ii    = as.numeric(OPTS_NEXT_TERM$strike[i+1])
  # Define K_i-1 == K_i
  K_i     = as.numeric(OPTS_NEXT_TERM$strike[i])
  # Calculate Delta_K
  Delta_K = (K_ii - K_i)/2
  # Calculate (K_i)^2 == K_2i
  K_2i    = (K_i)^2
  # Calculate Exponent Function of exp(R*T)
  Ex.pon  = exp(TREAS_NEXT*TT_NEXT)
  # Get the Midpoint of K_i
  Mid_K_i = as.numeric(OPTS_NEXT_TERM$Mid[i])
  # Calculate the Equation and Place it into the List
  NEXT_CONTRIB_LIST[[i]] = (Delta_K/K_2i)*Ex.pon*Mid_K_i
}
NEXT_CONTRIB_LIST          <- data.frame(do.call(rbind,NEXT_CONTRIB_LIST)); colnames(NEXT_CONTRIB_LIST) <-"Contrib_by_Strike"
OPTS_NEXT_TERM             <- cbind(OPTS_NEXT_TERM,NEXT_CONTRIB_LIST)
OPTS_NEXT_TERM             <- na.omit(OPTS_NEXT_TERM)
# Calculate the Summation of the Contributions by Strike, double it, then divide by the DTE
SIGMA_NEAR_PART_1          = (sum(OPTS_NEXT_TERM$Contrib_by_Strike))*2*(1/TT_NEAR)
SIGMA_NEXT_PART_1          = (sum(OPTS_NEXT_TERM$Contrib_by_Strike))*2*(1/TT_NEXT)
# Next, calculate the second half of the equation
SIGMA_NEAR_PART_2          = (((FW_PRICE_NEAR/FW_NEAR_OPT$K_0)-1)^2)/TT_NEAR
SIGMA_NEXT_PART_2          = (((FW_PRICE_NEXT/FW_NEXT_OPT$K_0)-1)^2)/TT_NEXT
# Calculate Sigma Squared for near and next terms
SIGMA_SQUARED_NEAR         = SIGMA_NEAR_PART_1 - SIGMA_NEAR_PART_2
SIGMA_SQUARED_NEXT         = SIGMA_NEXT_PART_1 - SIGMA_NEXT_PART_2
# TIME FOR STEP 3 !!!!!!!!!!!!! ******************************************** ####
# Get the current Times 
NT___1 = TT_NEAR*525600
NT___2 = TT_NEXT*525600
NT__30 = 43200 
NT_365 = 525600
# Calculate the VIX
A = ((TT_NEAR*SIGMA_SQUARED_NEAR)*((NT___2 - NT__30)/(NT___2 - NT___1)))
B = ((TT_NEXT*SIGMA_SQUARED_NEXT)*((NT__30 - NT___1)/(NT___2 - NT___1)))
IV_SPOT = (sqrt((A+B)*(NT_365/NT__30)))*100; IV_SPOT
if (SYMBOL == "^GSPC"){
  getQuote("^VIX")[2]
}
# Test the option chain
check_opts_near <- subset(INDEX_OPTS,INDEX_OPTS$flag == "C"
                          & as.numeric(INDEX_OPTS$strike) == K_NEAR
                          & as.numeric(INDEX_OPTS$days2Exp) == t.near)
check_opts_next <- subset(INDEX_OPTS,INDEX_OPTS$flag == "C"
                          & as.numeric(INDEX_OPTS$strike) == K_NEXT
                          & as.numeric(INDEX_OPTS$days2Exp) == t.next)

if (ASSIGNMENT == "european"){
  check_iv_near   <- EuropeanOptionImpliedVolatility(
    type = "call",
    underlying = UND_SPOT,
    strike = K_NEAR,
    maturity = t.near/365,
    value = as.numeric(check_opts_near$Mid),
    dividendYield = 0.0126, 
    riskFreeRate = TREAS_NEAR,
    volatility = IV_SPOT) %>% as.numeric() %*%  100
  print(paste0("The European Implied Volatility for ATMF Near Term Options is"," ",round(check_iv_near,3)," % ."))
  check_iv_next   <- EuropeanOptionImpliedVolatility(
    type = "call",
    underlying = UND_SPOT,
    strike = K_NEXT,
    maturity = t.next/365,
    value = as.numeric(check_opts_next$Mid),
    dividendYield = 0.0126, 
    riskFreeRate = TREAS_NEXT,
    volatility = IV_SPOT) %>% as.numeric() %*%  100
  print(paste0("The European Implied Volatility for ATMF Next Term Options is"," ",round(check_iv_next,3)," % ."))
  print(paste0("The weighted average of ATMF IV for the Underlying"," ",round(IV_SPOT,3)," % ."))
}else {
  check_iv_near   <- AmericanOptionImpliedVolatility(
    type = "call",
    underlying = UND_SPOT,
    strike = K_NEAR,
    maturity = t.near/365,
    value = as.numeric(check_opts_near$Mid),
    dividendYield = 0, 
    riskFreeRate = TREAS_NEAR,
    volatility = IV_SPOT) %>% as.numeric() %*%  100
  print(paste0("The American Implied Volatility for ATMF Near Term Options is"," ",round(check_iv_near,3)," % ."))
  check_iv_next   <- AmericanOptionImpliedVolatility(
    type = "call",
    underlying = UND_SPOT,
    strike = K_NEXT,
    maturity = t.next/365,
    value = as.numeric(check_opts_next$Mid),
    dividendYield = 0, 
    riskFreeRate = TREAS_NEXT,
    volatility = IV_SPOT) %>% as.numeric() %*%  100
  print(paste0("The American Implied Volatility for ATMF Next Term Options is"," ",round(check_iv_next,3)," % ."))
  print(paste0("The weighted average of ATMF IV for the Underlying"," ",round(IV_SPOT,3)," % ."))
}
# Finish
end.time = Sys.time()
Finish_Line = end.time - start.time; Finish_Line
##############
